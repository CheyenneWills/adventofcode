link ximage
record pattern(in,out)
procedure main(args)
    inf := open(args[1],"r")
    patterns := []
    every l := !inf do
        l ? {
            p1 := trim(tab(find("=>")))
            ="=>"
            tab(many(' \t'))
            p2 := []
            while not pos(0) do {
                put(p2,tab(upto('/') | 0))
                move(1)
            }
            
            push(patterns,pattern(p1,p2))
        }

    block := [".#.",
              "..#",
              "###"]
    prtblock(block)
    nblock := newblock(patterns,block)
    block := nblock
    prtblock(block)
    
    nblock := newblock(patterns,block)
    prtblock(nblock)
    
    exit()
    every 1 to 2 do {
        block := newblock(patterns,block)
    }
    count := 0
        every l := !block do
            every find("#",l) do count +:= 1
    write("Part1=",count)
end

procedure prtblock(block)
    write()
    write("+",repl("-",*block),"+")
    every write("|",!block,"|") 
    write("+",repl("-",*block),"+")


end


procedure newblock(patterns,block)
    
    if *block % 2 = 0 then bsize := 2
    else bsize := 3
   
    newblocks := list()
    every cell := getcell(block,bsize) do {

        put(newblocks,patmatch(patterns,cell))
    }

    return mergecells(newblocks)

end

procedure patmatch(patterns,cell)
    static pmaps
    initial {
        pmaps := table()
        pmaps[2] := ["12,34",
                     ["12,34",   # Identity
                      "31,42",   # 90
                      "43,21",   # 180
                      "24,13",   # 270
                      "34,12",   # H
                      "21,43"]]  # V
        pmaps[3] := ["123,456,789",
                     ["123,456,789",    # Identity
                      "741,852,963",    # 90
                      "987,654,321",    # 180
                      "369,258,147",    # 270
                      "789,456,123",    # H
                      "321,654,987"]]   # V
    }

    cellsize := *cell
    mapin := pmaps[cellsize][1]
    mapt  := pmaps[cellsize][2]

    cellstr := ""
    every cellstr ||:= !cell || "/"
    cellstr[-1] := ""
    #write("patmatch: [",cellstr,"] psize=",cellsize^2 + cellsize-1)
    every (p := !patterns) & *p.in = (cellsize^2 + cellsize-1) do {
     #   write(p.in,"->",mapin)
        if cellstr == map(!mapt,mapin,p.in) then {
       #     write("match..")
            return p.out
        }
      #  write("nomatch")
    }

end

procedure mergecells(blist)

    S := *blist
    Y := *blist[1]
    X := sqrt(S) * Y
    N := S^2 * Y

    write(
        "N=",N,
        " X=",X,
        " Y=",Y
        )
    block := list(N/X,repl(" ",Y))

    every i := 1 to N do {
        R := (i-1) % X
        C := (i-1) / Y
        block[R+1][C+1+:Y] := blist[R+1][C+1]  
    }
    return block





end

procedure getcell(block,bsize)
    cell := list(bsize)
    every i := 1 to (*block / bsize)^2 do {
        ccol := ((i-1) % (bsize))  
        crow := integer((i) / (bsize+1))

        cell := list(bsize)
        every j := 1 to bsize do {
       #     write("getcell:",
       #         " j=",j,
       #         " crow=",crow,
       #         " ccol=",ccol,
       #         " bsize=",bsize,
       #         " i=",i,
       #         " bi=",j+(crow*bsize),
       #         " si=",1+ccol*bsize)
            cell[j] := block[j+(crow*bsize)][(1+(ccol*bsize))+:bsize]
        }

        suspend cell
    }

end

