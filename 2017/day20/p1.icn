record particle(id,dist,amag,vmag,px,py,pz,vx,vy,vz,ax,ay,az)

procedure main(args)
    inf := open(args[1],"r")
    plist := []
    num := '-' ++ &digits

    pmin := &null
    id := 0
    every l := !inf do {
        p := particle()
        p.id := id
        id +:= 1

        l ? {
            tab(upto(num))
            p.px := tab(many(num))
            tab(upto(num))
            p.py := tab(many(num))
            tab(upto(num))
            p.pz := tab(many(num))

            tab(upto(num))
            p.vx := tab(many(num))
            tab(upto(num))
            p.vy := tab(many(num))
            tab(upto(num))
            p.vz := tab(many(num))

            tab(upto(num))
            p.ax := tab(many(num))
            tab(upto(num))
            p.ay := tab(many(num))
            tab(upto(num))
            p.az := tab(many(num))
        }
        p.dist := abs(p.px) + abs(p.py) + abs(p.pz)
        p.amag := abs(p.ax) + abs(p.ay) + abs(p.az)
        p.vmag := abs(p.vx) + abs(p.vy) + abs(p.vz)
        
        put(plist,p)

        pmin := pcomp(pmin,p)
        
    }
    write("Part1=",pmin.id)
    

    # Part 2
    # Collect all the collisions
    collisions := table()
    every i := 1 to *plist-1 do {
        every j := i+1 to *plist do {
            every t := collide(plist[i],plist[j]) do {
                /collisions[t] := []
                put(collisions[t],[plist[i],plist[j]])
            }
        }
    }

    # remove the collided pairs
    collisions := sort(collisions)
    remaining := set(plist)
    every t := !collisions do {
        k := set([])
        every pair := !t[2] do {
            if member(remaining,pair[1]) &
               member(remaining,pair[2]) then {
                insert(k,pair[1])
                insert(k,pair[2])
            }
        }
        every delete(remaining,!k)
    }
    write("Part2=",*remaining)

end
procedure collide(p0,p1)

    # Calculate the times that p0 and p1 collide -- or fail

    ax := (p0.ax - p1.ax)/2.0 
    vx := p0.vx - p1.vx
    px := p0.px - p1.px 
    
    ay := (p0.ay - p1.ay)/2.0 
    vy := p0.vy - p1.vy
    py := p0.py - p1.py 
    
    az := (p0.az - p1.az)/2.0 
    vz := p0.vz - p1.vz
    pz := p0.pz - p1.pz 

    every t := solvequad(ax,vx+ax,px) do 
        if t > 0 & integer(t) = t then {
            t := integer(t)
            if ay*t^2 + (vy+ay)*t + py = 0 &
               az*t^2 + (vz+az)*t + pz = 0 then suspend r
        }
end

procedure solvequad(a,b,c)
    if a ~= 0 then {
        i := b^2 - (4*a*c)
        if i < 0 then fail # No real roots..
        suspend  (-b + sqrt(i)) / (2.0*a)
        suspend  (-b - sqrt(i)) / (2.0*a)
    } else if b ~= 0 then suspend -c/real(b)
    else if c ~= 0 then suspend c
end

procedure pcomp(pmin,p)
    if /pmin then return p

    if pmin.amag < p.amag then fail
    if pmin.amag > p.amag then return p

    # Equal absolute mag of accel
    if pmin.vmag < p.vmag then fail
    if pmin.vmag > p.vmag then return p

    # Equal absolute vol
    if pmin.dist < p.dist then fail
    if pmin.dist > p.dist then return p

    fail
end
