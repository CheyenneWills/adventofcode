link scan
global Memory
record Mem(i,v)
global Regs
record Reg(i,v)
global Stack
global SP
global IP
global CC
global opFuncs


procedure main(args)

    Init()

    inf := open(args[1],"ru")
    rp := 1
    while data := reads(data,1024) do {
        data ? {
            while not pos(0) do
                Mem[rp] := unpack()
                rp +:= 1
        }
    }
    close(inf)

    repeat {
        opcode := Fetch()
        case opcode of {
            0 : { # Halt
                break
            }
            1 : { # set: 1 a b set register <a> to the value of <b>
                a := Fetch()
                b := Fetch()
                if type(a) ~== "Reg" then stop("Invalid register")
                Stor(a,b)
            }
            2 : { # push: 2 a push <a> onto the stack
                push(Stack,Fetch().v)
            }
            3 : { # pop: 3 a remove the top element from the stack and write it into <a>; empty stack = error
                if *Stack = 0 then stop("Empty Stack Error")
                v := pop(Stack)
                a := Fetch()
                Stor(a,v)
                a := getVal(IP+:=1)
                if type(a) == "Reg" then Regs[a.v+1] := v
                else Mem[a+1] := v
            }
            4: { #eq: 4 a b c   set <a> to 1 if <b> is equal to <c>; set it to 0 otherwise
                a := getVal(IP+:=1)
                b := getVal(IP+:=1)
                c := getVal(IP+:=1)

            }
        }

    }



end

procedure unpack()
    v := ord(move(1))           # Low byte
    v +:=  256 * ord(move(1))   # High byte
    return v
end
procedure pack(n)
    s := char(n % 256)          # Low byte
    s ||:= char(n/256)
    return s
end
procedure Stor(loc,v)
    if type(loc) == "Reg" then Regs[loc.i] := v.v
    else if type(loc) == "Mem" then Memory[loc.v+1] := v.v
    else Memory[loc.v+1] := v
    return
end
procedure Peek(addr)
    /addr := IP
    w := Memory[addr+1]
    if w < 32768 then return Mem(addr,w)
    if w > 32776 then stop("Invalid memory value")
    w -:= 32768
    return Reg(w-32768,Regs[w+1])
end
procedure Fetch(addr)
    v := Peek(addr)
    if /addr then IP +:= 1
    return v
end




procedure Init()
    Mem := list(32768)
    Regs := list(8)

    every i := 1 to 8 do
        Regs[i] := Reg(0)

    Stack := list()
    SP := 0
    IP := 0
    CC := 0

end
