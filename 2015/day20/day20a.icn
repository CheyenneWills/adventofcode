
procedure main(args)
	goal := args[1]

	every n := seq() do {
		sum := 0
		every sum +:= sumdivisors(n)
		if 10 * sum >= goal then break
	}
	write(n)
end

procedure sumdivisors(n)
	# Forumla for sum of divisors
	#
	#   k    m +1
	#  ---    i
	#  | |  p       - 1
	#  | |   i
	#  | | ---------------
	#  | |     p   - 1
	#  | |      i
	#  i=1

	# Where p  are distinct primes and m  are the multiplicities
	#        i                          i
	#  ex:  sum of divisors for 1800.  1800 factors out as as: 2^3 * 3^2 * 5^2
	#  ((2^4 - 1)/(2-1)) * ((3^3 - 1)/(3 - 1)) * ((5^3 - 1)/ (5 - 1)) = 6045
	#
	static PRIMES
	local sum
	local x,i
	initial {
		PRIMES := [
			2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
			73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
			157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
			239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
			331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
			421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
			509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
			613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701
			]
	}
	x := n
	sum := 1
	every i := 1 to *PRIMES do {
		if PRIMES[i] > x / PRIMES[i] then break

		if x % PRIMES[i] = 0 then {
			sub := PRIMES[i] + 1
			x /:= PRIMES[i]
			while x % PRIMES[i] = 0 do {
				x /:= PRIMES[i]
				sub := sub * PRIMES[i] + 1
			}
			sum *:= sub
		}
	}
	if x > 1 then sum *:= x + 1
	return sum

end

