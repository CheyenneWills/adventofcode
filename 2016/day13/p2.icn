
record POS(x,y,t)
global MN
global MAP
global locs
procedure main(args)
	MN := integer(args[1])

	locs := 0

	MAP := table()

	startp := POS(1,1,"O")
	steps := search(0,[startp])
	write(locs)


end

procedure search(d,l)
	if *l = 0 then fail
	d +:= 1
	newl := []

	every p := !l do {
		every np := genmoves(p) do {
			put(newl,np)
		}
	}
	if d = 50 then return
	else return search(d,newl)
end
procedure genmoves(p)
	every a := ![ [1,0],[-1,0],[0,1],[0,-1]] do {
		nextp := POS( p.x + a[1], p.y + a[2])

		if nextp.x < 0 | nextp.y < 0 then next

		\MAP[nextp.x||"," || nextp.y] & next

		nextp.t := decode(nextp)

		MAP[nextp.x || ","|| nextp.y ] := nextp.t

		if nextp.t == "." then suspend {
			if MAP[nextp.x || "," || nextp.y] == "." then locs +:= 1

			MAP[nextp.x || ","|| nextp.y ] := "O"

			nextp
		}
	}
end

procedure decode(p)
	v := ( (p.x*p.x) + (3*p.x) + (2*p.x*p.y) + p.y + (p.y*p.y) ) + MN
	nbits := popcount(v)
	if nbits % 2 = 0 then return "."
	else return "#"
end

procedure popcount(x)
    x := x - iand( ishift(x,-1),16r55555555)
    x := iand(x,16r33333333) + iand( ishift(x,-2),16r33333333)
    x := iand(x + ishift(x,-4),16r0f0f0f0f)
    x := x + ishift(x,-8)
    x := x + ishift(x,-16)
    return iand( x, 16r0000003f)
end